generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  peerId        String    @unique @default(cuid())
  name          String?
  email         String    @unique
  provider      String
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Account       Account[]
  Session       Session[]
  Meet          Meet[]
  Peer          Peer?

  @@unique([id, peerId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Meet {
  id        String   @id @default(cuid())
  hostId    String
  host      User     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  peers     String[]
  active    Boolean
  createdAt DateTime @default(now())
  Peer      Peer[]
}

model Peer {
  id       String   @id @default(cuid())
  userId   String   @unique
  user     User     @relation(fields: [userId], references: [id])
  approved Boolean
  meetId   String
  meet     Meet     @relation(fields: [meetId], references: [id])
}
